/*
 * <auto-generated>
 *	 The code is generated by tools
 *	 Edit manually this code will lead to incorrect behavior
 * </auto-generated>
 */

#include "XNpcList.h"

XNpcList::XNpcList(void)
{
	name = UNITY_STREAM_PATH + "Table/XNpcList.bytes";
	ReadTable();
}

void XNpcList::ReadTable()
{
	LOG("read:"+name);
	Open(name.c_str());
	long long filesize =0;
	int lineCnt = 0;
	Read(&filesize);
	Read(&lineCnt);
	m_data.clear();
	for(int i=0;i<lineCnt;i++)
	{
		XNpcListRow *row = new XNpcListRow();
		
		Read(&(row->npcid));
		ReadString(row->npcname);
		Read(&(row->presentid));
		ReadString(row->npcicon);
		ReadString(row->npcportrait);
		Read(&(row->npcscene));
		ReadArray<float>(row->npcposition);
		ReadArray<float>(row->npcrotation);
		Read(&(row->requiredtaskid));
		ReadString(row->content);
		ReadString(row->functionlist);
		Read(&(row->gazing));
		Read(&(row->onlyhead));
		ReadString(row->voice);
		ReadString(row->showup);
		Read(&(row->disappeartask));
		Read(&(row->npctype));
		m_data.push_back(*row);
	}
	this->Close();
}

void XNpcList::GetRow(int idx,XNpcListRow* row)
{
	size_t len = m_data.size();
	if(idx<(int)len)
	{
		*row = m_data[idx];
	}
	else
	{
		LOG("eror, XNpcList index out of range, size: "+tostring(len)+" idx: "+tostring(idx));
	}
}

int XNpcList::GetLength()
{
	return (int)m_data.size();
}


extern "C"
{
	XNpcList *xnpclist;

	int iGetXNpcListLength()
	{
		if(xnpclist==NULL)
		{
			xnpclist = new XNpcList();
		}
		return xnpclist->GetLength();
	}

	void iGetXNpcListRow(int suitid,XNpcListRow* row)
	{
		if(xnpclist==NULL)
		{
			xnpclist = new XNpcList();
		}
		xnpclist->GetRow(suitid,row);
	}
}