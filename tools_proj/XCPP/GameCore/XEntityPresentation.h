/*
 * <auto-generated>
 *	 The code is generated by tools
 *	 Edit manually this code will lead to incorrect behavior
 * </auto-generated>
 */

#ifndef __XEntityPresentation__
#define __XEntityPresentation__

#include "NativeReader.h"
#include "Log.h"
#include <vector>
#include <unordered_map>


struct XEntityPresentationRow
{
	
	uint uid;
	char prefab[MaxStringSize];
	char name[MaxStringSize];
	char bonesuffix[MaxStringSize];
	char animlocation[MaxStringSize];
	char skilllocation[MaxStringSize];
	char curvelocation[MaxStringSize];
	float boundradius;
	float boundradiusoffset[MaxArraySize];
	float boundheight;
	char hugemonstercolliders[MaxStringSize];
	float scale;
	char uiavatarangle[MaxStringSize];
	float uiavatarscale;
	char avatarpos[MaxStringSize];
	bool huge;
	char entergame[MaxStringSize];
	int angluarspeed;
	char idle[MaxStringSize];
	char attackidle[MaxStringSize];
	char fishingidle[MaxStringSize];
	char walk[MaxStringSize];
	char attackwalk[MaxStringSize];
	char run[MaxStringSize];
	char attackrun[MaxStringSize];
	char runleft[MaxStringSize];
	char attackrunleft[MaxStringSize];
	char runright[MaxStringSize];
	char attackrunright[MaxStringSize];
	char movefx[MaxStringSize];
	char freeze[MaxStringSize];
	char freezefx[MaxStringSize];
	char hit_f[MaxArraySize][MaxStringSize];
	char hit_l[MaxArraySize][MaxStringSize];
	char hit_r[MaxArraySize][MaxStringSize];
	float hitbackoffsettimescale[MaxArraySize];
	char hitfly[MaxArraySize][MaxStringSize];
	float hitflyoffsettimescale[MaxArraySize];
	char hit_roll[MaxArraySize][MaxStringSize];
	float hitrolloffsettimescale[MaxArraySize];
	float hitback_recover[MaxArraySize];
	float hitfly_bounce_getup[MaxArraySize];
	float hitroll_recover;
	char hitfx[MaxStringSize];
	char death[MaxStringSize];
	char deathfx[MaxStringSize];
	char hitcurves[MaxArraySize][MaxStringSize];
	char deathcurve[MaxStringSize];
	char a[MaxStringSize];
	char aa[MaxStringSize];
	char aaa[MaxStringSize];
	char aaaa[MaxStringSize];
	char aaaaa[MaxStringSize];
	char otherskills[MaxArraySize][MaxStringSize];
	char skillnum[MaxStringSize];
	char dash[MaxStringSize];
	char ultra[MaxStringSize];
	char appear[MaxStringSize];
	char disappear[MaxStringSize];
	char fishingcast[MaxStringSize];
	char fishingpull[MaxStringSize];
	char fishingwait[MaxStringSize];
	char fishingwin[MaxStringSize];
	char fishinglose[MaxStringSize];
	char dance[MaxStringSize];
	char kiss[MaxStringSize];
	char inheritactionone[MaxStringSize];
	char inheritactiontwo[MaxStringSize];
	char atlas[MaxStringSize];
	char avatar[MaxStringSize];
	char atlas2[MaxStringSize];
	char avatar2[MaxStringSize];
	bool shadow;
	char feeble[MaxStringSize];
	char feeblefx[MaxStringSize];
	char armorbroken[MaxStringSize];
	char superarmorrecoveryskill[MaxStringSize];
	char recoveryfx[MaxStringSize];
	char recoveryhitslowfx[MaxStringSize];
	char recoveryhitstopfx[MaxStringSize];
};

class XEntityPresentation:public NativeReader
{
public:
	XEntityPresentation(void);
	void ReadTable();
	void GetRow(int val,XEntityPresentationRow* row);
	void GetByUID(uint id, XEntityPresentationRow* row);
	int GetLength();

protected:
	std::string name;
	std::vector<XEntityPresentationRow*> m_data;
	std::unordered_map<uint, XEntityPresentationRow*> m_map;
};


extern "C"
{
	ENGINE_INTERFACE_EXPORT int iGetXEntityPresentationLength();
	ENGINE_INTERFACE_EXPORT void iGetXEntityPresentationRow(int idx,XEntityPresentationRow* row);
	ENGINE_INTERFACE_EXPORT void iGetXEntityPresentationRowByID(uint id, XEntityPresentationRow* row);
};

#endif