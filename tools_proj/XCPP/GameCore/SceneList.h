/*
 * <auto-generated>
 *	 The code is generated by tools
 *	 Edit manually this code will lead to incorrect behavior
 * </auto-generated>
 */

#ifndef __SceneList__
#define __SceneList__

#include "NativeReader.h"
#include "Log.h"
#include <vector>
#include <unordered_map>


struct SceneListRow
{
	
	int sceneid;
	char comment[MaxStringSize];
	int scenetype;
	int isstaticscene;
	int pretask;
	int prescene[MaxArraySize];
	int requiredlevel;
	int syncmode;
	bool switchtoself;
	bool canreconnect;
	int endtimeout;
	bool iscanquit;
	float delaytransfer;
	int linerolecount;
	char buff[MaxStringSize];
	char scenefile[MaxStringSize];
	char unityscenefile[MaxStringSize];
	char scenepath[MaxStringSize];
	char bgm[MaxStringSize];
	char blockfilepath[MaxStringSize];
	int operationsettings[MaxArraySize];
	char startpos[MaxStringSize];
	int startface[MaxArraySize];
	float startrot[MaxArraySize];
	char chapter[MaxStringSize];
	int uipos[MaxArraySize];
	char boxuipos[MaxStringSize];
	char uiicon[MaxStringSize];
	char fatiguecost[MaxStringSize];
	int viewabledroplist[MaxArraySize];
	int exp;
	int drop[MaxArraySize];
	int drop1[MaxArraySize];
	int drop2[MaxArraySize];
	int drop3[MaxArraySize];
	int drop4[MaxArraySize];
	int drop5[MaxArraySize];
	int money;
	int firstdownexp;
	int firstdowndrop[MaxArraySize];
	int firstdownmoney;
	char firstsss[MaxStringSize];
	char expsealreward[MaxStringSize];
	char scenechest[MaxStringSize];
	char diamonddropid[MaxStringSize];
	char golddropid[MaxStringSize];
	char silverdropid[MaxStringSize];
	char copperdropid[MaxStringSize];
	char sbox[MaxStringSize];
	char ssbox[MaxStringSize];
	char sssbox[MaxStringSize];
	bool isboss;
	int recommendpower;
	char bossavatar[MaxStringSize];
	char bossicon[MaxStringSize];
	char endcutscene[MaxStringSize];
	char endcutscenetime[MaxStringSize];
	char wincondition[MaxStringSize];
	char losecondition[MaxStringSize];
	char windelaytime[MaxStringSize];
	int daylimit;
	int cooldown;
	char daylimitgroupid[MaxStringSize];
	bool candrawbox;
	bool hasflyout;
	char dynamicscene[MaxStringSize];
	char envset[MaxStringSize];
	bool canrevive;
	char revivenumb[MaxStringSize];
	char revivecost[MaxStringSize];
	char revivemoneycost[MaxStringSize];
	char revivetime[MaxStringSize];
	char revivebuff[MaxStringSize];
	char revivebufftip[MaxStringSize];
	bool canpause;
	bool showup;
	char loadingtips[MaxStringSize];
	char loadingpic[MaxStringSize];
	bool scenecannavi;
	bool showautofight;
	bool showbattlestatistics;
	char randomtasktype[MaxStringSize];
	char randomtaskspecify[MaxStringSize];
	int usesupplement;
	int hurtcoef;
	char minimap[MaxStringSize];
	int minimapsize[MaxArraySize];
	char minimapoutsize[MaxStringSize];
	int minimaprotation;
	char staticminimapcenter[MaxStringSize];
	char sceneai[MaxStringSize];
	char pptcoff[MaxStringSize];
	char guildexpbounus[MaxStringSize];
	char failtext[MaxStringSize];
	char leavescenetip[MaxStringSize];
	char recommendhint[MaxStringSize];
	char teaminfodefaulttab[MaxStringSize];
	int combattype;
	int sweepneedppt;
	int timecounter[MaxArraySize];
	bool hascombobuff;
	bool displaypet;
	char autoreturn[MaxStringSize];
	char storydriver[MaxStringSize];
	int minpasstime;
	bool showskill;
	bool shownormalattack;
	char winconditiontips[MaxStringSize];
	char battleexplaintips[MaxStringSize];
	char dps[MaxStringSize];
	char canviprevive[MaxStringSize];
	bool hideteamindicate;
	char shieldsight[MaxStringSize];
	int specifiedtargetlocatedrange;
	char spactivityactivedrop[MaxStringSize];
	char spactivitydrop[MaxStringSize];
	char viprevivelimit[MaxStringSize];
};

class SceneList:public NativeReader
{
public:
	SceneList(void);
	void ReadTable();
	void GetRow(int val,SceneListRow* row);
	void GetByUID(uint id, SceneListRow* row);
	int GetLength();

protected:
	std::string name;
	std::vector<SceneListRow> m_data;
	std::unordered_map<uint, SceneListRow> m_map;
};


extern "C"
{
	ENGINE_INTERFACE_EXPORT int iGetSceneListLength();
	ENGINE_INTERFACE_EXPORT void iGetSceneListRow(int idx,SceneListRow* row);
	ENGINE_INTERFACE_EXPORT void iGetSceneListRowByID(uint id, SceneListRow* row);
};

#endif