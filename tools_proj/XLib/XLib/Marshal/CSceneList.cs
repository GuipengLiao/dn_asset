//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8784
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace XTable {
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    
    
    public class CSceneList {
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public struct RowData {
			int sceneid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string comment;
			int scenetype;
			int isstaticscene;
			int pretask;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] prescene;
			int requiredlevel;
			int syncmode;
			bool switchtoself;
			bool canreconnect;
			int endtimeout;
			bool iscanquit;
			float delaytransfer;
			int linerolecount;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string buff;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string scenefile;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string unityscenefile;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string scenepath;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string bgm;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string blockfilepath;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] operationsettings;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string startpos;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] startface;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] startrot;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string chapter;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] uipos;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string boxuipos;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string uiicon;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string fatiguecost;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] viewabledroplist;
			int exp;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop1;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop2;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop3;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop4;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop5;
			int money;
			int firstdownexp;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] firstdowndrop;
			int firstdownmoney;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string firstsss;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string expsealreward;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string scenechest;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string diamonddropid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string golddropid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string silverdropid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string copperdropid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string sbox;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string ssbox;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string sssbox;
			bool isboss;
			int recommendpower;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string bossavatar;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string bossicon;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string endcutscene;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string endcutscenetime;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string wincondition;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string losecondition;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string windelaytime;
			int daylimit;
			int cooldown;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string daylimitgroupid;
			bool candrawbox;
			bool hasflyout;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string dynamicscene;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string envset;
			bool canrevive;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivenumb;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivecost;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivemoneycost;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivetime;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivebuff;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivebufftip;
			bool canpause;
			bool showup;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string loadingtips;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string loadingpic;
			bool scenecannavi;
			bool showautofight;
			bool showbattlestatistics;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string randomtasktype;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string randomtaskspecify;
			int usesupplement;
			int hurtcoef;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string minimap;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] minimapsize;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string minimapoutsize;
			int minimaprotation;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string staticminimapcenter;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string sceneai;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string pptcoff;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string guildexpbounus;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string failtext;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string leavescenetip;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string recommendhint;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string teaminfodefaulttab;
			int combattype;
			int sweepneedppt;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] timecounter;
			bool hascombobuff;
			bool displaypet;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string autoreturn;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string storydriver;
			int minpasstime;
			bool showskill;
			bool shownormalattack;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string winconditiontips;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string battleexplaintips;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string dps;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string canviprevive;
			bool hideteamindicate;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string shieldsight;
			int specifiedtargetlocatedrange;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string spactivityactivedrop;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string spactivitydrop;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string viprevivelimit;

			public int SceneID { get { return sceneid; } }

			public string Comment { get { return comment; } }

			public int SceneType { get { return scenetype; } }

			public int IsStaticScene { get { return isstaticscene; } }

			public int PreTask { get { return pretask; } }

			int[] Prescene { 
				get { 
					if (prescene.Length == 16) {
					List<int> list = new List<int>();
					for (int i = prescene.Length - 1; i >= 0; i--)
					{
						if (prescene[i] != -1) list.Add(prescene[i]);
					}
					prescene = list.ToArray();
					}
					 return prescene;
				}
			}

			public int RequiredLevel { get { return requiredlevel; } }

			public int SyncMode { get { return syncmode; } }

			public bool SwitchToSelf { get { return switchtoself; } }

			public bool CanReconnect { get { return canreconnect; } }

			public int EndTimeOut { get { return endtimeout; } }

			public bool IsCanQuit { get { return iscanquit; } }

			public float DelayTransfer { get { return delaytransfer; } }

			public int LineRoleCount { get { return linerolecount; } }

			public string Buff { get { return buff; } }

			public string SceneFile { get { return scenefile; } }

			public string UnitySceneFile { get { return unityscenefile; } }

			public string ScenePath { get { return scenepath; } }

			public string BGM { get { return bgm; } }

			public string BlockFilePath { get { return blockfilepath; } }

			int[] Operationsettings { 
				get { 
					if (operationsettings.Length == 16) {
					List<int> list = new List<int>();
					for (int i = operationsettings.Length - 1; i >= 0; i--)
					{
						if (operationsettings[i] != -1) list.Add(operationsettings[i]);
					}
					operationsettings = list.ToArray();
					}
					 return operationsettings;
				}
			}

			public string StartPos { get { return startpos; } }

			int[] Startface { 
				get { 
					if (startface.Length == 16) {
					List<int> list = new List<int>();
					for (int i = startface.Length - 1; i >= 0; i--)
					{
						if (startface[i] != -1) list.Add(startface[i]);
					}
					startface = list.ToArray();
					}
					 return startface;
				}
			}

			float[] Startrot { 
				get { 
					if (startrot.Length == 16) {
					List<float> list = new List<float>();
					for (int i = startrot.Length - 1; i >= 0; i--)
					{
						if (startrot[i] != -1) list.Add(startrot[i]);
					}
					startrot = list.ToArray();
					}
					 return startrot;
				}
			}

			public string Chapter { get { return chapter; } }

			int[] Uipos { 
				get { 
					if (uipos.Length == 16) {
					List<int> list = new List<int>();
					for (int i = uipos.Length - 1; i >= 0; i--)
					{
						if (uipos[i] != -1) list.Add(uipos[i]);
					}
					uipos = list.ToArray();
					}
					 return uipos;
				}
			}

			public string BoxUIPos { get { return boxuipos; } }

			public string UIIcon { get { return uiicon; } }

			public string FatigueCost { get { return fatiguecost; } }

			int[] Viewabledroplist { 
				get { 
					if (viewabledroplist.Length == 16) {
					List<int> list = new List<int>();
					for (int i = viewabledroplist.Length - 1; i >= 0; i--)
					{
						if (viewabledroplist[i] != -1) list.Add(viewabledroplist[i]);
					}
					viewabledroplist = list.ToArray();
					}
					 return viewabledroplist;
				}
			}

			public int Exp { get { return exp; } }

			int[] Drop { 
				get { 
					if (drop.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop.Length - 1; i >= 0; i--)
					{
						if (drop[i] != -1) list.Add(drop[i]);
					}
					drop = list.ToArray();
					}
					 return drop;
				}
			}

			int[] Drop1 { 
				get { 
					if (drop1.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop1.Length - 1; i >= 0; i--)
					{
						if (drop1[i] != -1) list.Add(drop1[i]);
					}
					drop1 = list.ToArray();
					}
					 return drop1;
				}
			}

			int[] Drop2 { 
				get { 
					if (drop2.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop2.Length - 1; i >= 0; i--)
					{
						if (drop2[i] != -1) list.Add(drop2[i]);
					}
					drop2 = list.ToArray();
					}
					 return drop2;
				}
			}

			int[] Drop3 { 
				get { 
					if (drop3.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop3.Length - 1; i >= 0; i--)
					{
						if (drop3[i] != -1) list.Add(drop3[i]);
					}
					drop3 = list.ToArray();
					}
					 return drop3;
				}
			}

			int[] Drop4 { 
				get { 
					if (drop4.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop4.Length - 1; i >= 0; i--)
					{
						if (drop4[i] != -1) list.Add(drop4[i]);
					}
					drop4 = list.ToArray();
					}
					 return drop4;
				}
			}

			int[] Drop5 { 
				get { 
					if (drop5.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop5.Length - 1; i >= 0; i--)
					{
						if (drop5[i] != -1) list.Add(drop5[i]);
					}
					drop5 = list.ToArray();
					}
					 return drop5;
				}
			}

			public int Money { get { return money; } }

			public int FirstDownExp { get { return firstdownexp; } }

			int[] Firstdowndrop { 
				get { 
					if (firstdowndrop.Length == 16) {
					List<int> list = new List<int>();
					for (int i = firstdowndrop.Length - 1; i >= 0; i--)
					{
						if (firstdowndrop[i] != -1) list.Add(firstdowndrop[i]);
					}
					firstdowndrop = list.ToArray();
					}
					 return firstdowndrop;
				}
			}

			public int FirstDownMoney { get { return firstdownmoney; } }

			public string FirstSSS { get { return firstsss; } }

			public string ExpSealReward { get { return expsealreward; } }

			public string SceneChest { get { return scenechest; } }

			public string DiamondDropID { get { return diamonddropid; } }

			public string GoldDropID { get { return golddropid; } }

			public string SilverDropID { get { return silverdropid; } }

			public string CopperDropID { get { return copperdropid; } }

			public string SBox { get { return sbox; } }

			public string SSBox { get { return ssbox; } }

			public string SSSBox { get { return sssbox; } }

			public bool IsBoss { get { return isboss; } }

			public int RecommendPower { get { return recommendpower; } }

			public string BossAvatar { get { return bossavatar; } }

			public string BossIcon { get { return bossicon; } }

			public string EndCutScene { get { return endcutscene; } }

			public string EndCutSceneTime { get { return endcutscenetime; } }

			public string WinCondition { get { return wincondition; } }

			public string LoseCondition { get { return losecondition; } }

			public string WinDelayTime { get { return windelaytime; } }

			public int DayLimit { get { return daylimit; } }

			public int CoolDown { get { return cooldown; } }

			public string DayLimitGroupID { get { return daylimitgroupid; } }

			public bool CanDrawBox { get { return candrawbox; } }

			public bool HasFlyOut { get { return hasflyout; } }

			public string DynamicScene { get { return dynamicscene; } }

			public string EnvSet { get { return envset; } }

			public bool CanRevive { get { return canrevive; } }

			public string ReviveNumb { get { return revivenumb; } }

			public string ReviveCost { get { return revivecost; } }

			public string ReviveMoneyCost { get { return revivemoneycost; } }

			public string ReviveTime { get { return revivetime; } }

			public string ReviveBuff { get { return revivebuff; } }

			public string ReviveBuffTip { get { return revivebufftip; } }

			public bool CanPause { get { return canpause; } }

			public bool ShowUp { get { return showup; } }

			public string LoadingTips { get { return loadingtips; } }

			public string LoadingPic { get { return loadingpic; } }

			public bool SceneCanNavi { get { return scenecannavi; } }

			public bool ShowAutoFight { get { return showautofight; } }

			public bool ShowBattleStatistics { get { return showbattlestatistics; } }

			public string RandomTaskType { get { return randomtasktype; } }

			public string RandomTaskSpecify { get { return randomtaskspecify; } }

			public int UseSupplement { get { return usesupplement; } }

			public int HurtCoef { get { return hurtcoef; } }

			public string MiniMap { get { return minimap; } }

			int[] Minimapsize { 
				get { 
					if (minimapsize.Length == 16) {
					List<int> list = new List<int>();
					for (int i = minimapsize.Length - 1; i >= 0; i--)
					{
						if (minimapsize[i] != -1) list.Add(minimapsize[i]);
					}
					minimapsize = list.ToArray();
					}
					 return minimapsize;
				}
			}

			public string MiniMapOutSize { get { return minimapoutsize; } }

			public int MiniMapRotation { get { return minimaprotation; } }

			public string StaticMiniMapCenter { get { return staticminimapcenter; } }

			public string SceneAI { get { return sceneai; } }

			public string PPTCoff { get { return pptcoff; } }

			public string GuildExpBounus { get { return guildexpbounus; } }

			public string FailText { get { return failtext; } }

			public string LeaveSceneTip { get { return leavescenetip; } }

			public string RecommendHint { get { return recommendhint; } }

			public string TeamInfoDefaultTab { get { return teaminfodefaulttab; } }

			public int CombatType { get { return combattype; } }

			public int SweepNeedPPT { get { return sweepneedppt; } }

			int[] Timecounter { 
				get { 
					if (timecounter.Length == 16) {
					List<int> list = new List<int>();
					for (int i = timecounter.Length - 1; i >= 0; i--)
					{
						if (timecounter[i] != -1) list.Add(timecounter[i]);
					}
					timecounter = list.ToArray();
					}
					 return timecounter;
				}
			}

			public bool HasComboBuff { get { return hascombobuff; } }

			public bool DisplayPet { get { return displaypet; } }

			public string AutoReturn { get { return autoreturn; } }

			public string StoryDriver { get { return storydriver; } }

			public int MinPassTime { get { return minpasstime; } }

			public bool ShowSkill { get { return showskill; } }

			public bool ShowNormalAttack { get { return shownormalattack; } }

			public string WinConditionTips { get { return winconditiontips; } }

			public string BattleExplainTips { get { return battleexplaintips; } }

			public string DPS { get { return dps; } }

			public string CanVIPRevive { get { return canviprevive; } }

			public bool HideTeamIndicate { get { return hideteamindicate; } }

			public string ShieldSight { get { return shieldsight; } }

			public int SpecifiedTargetLocatedRange { get { return specifiedtargetlocatedrange; } }

			public string SpactivityActiveDrop { get { return spactivityactivedrop; } }

			public string SpActivityDrop { get { return spactivitydrop; } }

			public string VipReviveLimit { get { return viprevivelimit; } }
		}


#if UNITY_IPHONE || UNITY_XBOX360
		[DllImport("__Internal")]
#else
		[DllImport("XTable")]
#endif
		static extern void iGetSceneListRow(int idx, ref RowData row);

#if UNITY_IPHONE || UNITY_XBOX360
		[DllImport("__Internal")]
#else
		[DllImport("XTable")]
#endif
		static extern int iGetSceneListLength();
        
        private static RowData m_data;
        
        public static int length {
            get {
				return iGetSceneListLength();
            }
        }
        
        public static RowData GetRow(int idx) {
			iGetSceneListRow(idx, ref m_data);
			return m_data;
        }
    }
}
