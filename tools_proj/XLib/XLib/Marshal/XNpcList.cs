//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8784
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace XTable {
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    
    
    public class CXNpcList {
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public struct RowData {
			int npcid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string npcname;
			uint presentid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string npcicon;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string npcportrait;
			int npcscene;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] npcposition;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] npcrotation;
			int requiredtaskid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string content;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string functionlist;
			int gazing;
			bool onlyhead;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string voice;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string showup;
			int disappeartask;
			int npctype;

			public int Npcid { get { return npcid; } }

			public string Npcname { get { return npcname; } }

			public uint Presentid { get { return presentid; } }

			public string Npcicon { get { return npcicon; } }

			public string Npcportrait { get { return npcportrait; } }

			public int Npcscene { get { return npcscene; } }

			float[] Npcposition { 
				get { 
					if (npcposition.Length == 16) {
					List<int> list = new List<int>();
					for (int i = npcposition.Length - 1; i >= 0; i--)
					{
						if (npcposition[i] != -1) list.Add(npcposition[i]);
					}
					npcposition = list.ToArray();
					}
					 return npcposition;
				}
			}

			float[] Npcrotation { 
				get { 
					if (npcrotation.Length == 16) {
					List<int> list = new List<int>();
					for (int i = npcrotation.Length - 1; i >= 0; i--)
					{
						if (npcrotation[i] != -1) list.Add(npcrotation[i]);
					}
					npcrotation = list.ToArray();
					}
					 return npcrotation;
				}
			}

			public int Requiredtaskid { get { return requiredtaskid; } }

			public string Content { get { return content; } }

			public string Functionlist { get { return functionlist; } }

			public int Gazing { get { return gazing; } }

			public bool Onlyhead { get { return onlyhead; } }

			public string Voice { get { return voice; } }

			public string Showup { get { return showup; } }

			public int Disappeartask { get { return disappeartask; } }

			public int Npctype { get { return npctype; } }
		}


		[DllImport("XTable")]
		static extern void iGetXNpcListRow(int val, ref RowData row);

		[DllImport("XTable")]
		static extern int iGetXNpcListLength();
        
        private static RowData m_data;
        
        public static int length {
            get {
                return this.iGetXNpcListLength();
            }
        }
        
        public static RowData GetRow(int val) {
			iGetXNpcListRow(val, ref m_data);
			return m_data;
        }
    }
}
