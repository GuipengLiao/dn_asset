//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8784
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace XTable {
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    
    
    public class CXEntityPresentation {
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public struct RowData {
			uint uid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string prefab;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string name;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string bonesuffix;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string animlocation;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string skilllocation;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string curvelocation;
			float boundradius;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] boundradiusoffset;
			float boundheight;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string hugemonstercolliders;
			float scale;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string uiavatarangle;
			float uiavatarscale;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string avatarpos;
			bool huge;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string entergame;
			int angluarspeed;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string idle;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string attackidle;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string fishingidle;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string walk;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string attackwalk;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string run;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string attackrun;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string runleft;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string attackrunleft;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string runright;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string attackrunright;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string movefx;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string freeze;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string freezefx;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			string[] hit_f;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			string[] hit_l;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			string[] hit_r;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] hitbackoffsettimescale;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			string[] hitfly;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] hitflyoffsettimescale;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			string[] hit_roll;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] hitrolloffsettimescale;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] hitback_recover;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] hitfly_bounce_getup;
			float hitroll_recover;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string hitfx;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string death;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string deathfx;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			string[] hitcurves;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string deathcurve;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string a;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string aa;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string aaa;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string aaaa;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string aaaaa;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string otherskills;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string skillnum;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string dash;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string ultra;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string appear;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string disappear;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string fishingcast;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string fishingpull;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string fishingwait;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string fishingwin;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string fishinglose;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string dance;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string kiss;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string inheritactionone;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string inheritactiontwo;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string atlas;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string avatar;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string atlas2;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string avatar2;
			bool shadow;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string feeble;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string feeblefx;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string armorbroken;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string superarmorrecoveryskill;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string recoveryfx;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string recoveryhitslowfx;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string recoveryhitstopfx;

			public uint UID { get { return uid; } }

			public string Prefab { get { return prefab; } }

			public string Name { get { return name; } }

			public string BoneSuffix { get { return bonesuffix; } }

			public string AnimLocation { get { return animlocation; } }

			public string SkillLocation { get { return skilllocation; } }

			public string CurveLocation { get { return curvelocation; } }

			public float BoundRadius { get { return boundradius; } }

			float[] Boundradiusoffset { 
				get { 
					if (boundradiusoffset.Length == 16) {
					List<float> list = new List<float>();
					for (int i = boundradiusoffset.Length - 1; i >= 0; i--)
					{
						if (boundradiusoffset[i] != -1) list.Add(boundradiusoffset[i]);
					}
					boundradiusoffset = list.ToArray();
					}
					 return boundradiusoffset;
				}
			}

			public float BoundHeight { get { return boundheight; } }

			public string HugeMonsterColliders { get { return hugemonstercolliders; } }

			public float Scale { get { return scale; } }

			public string UIAvatarAngle { get { return uiavatarangle; } }

			public float UIAvatarScale { get { return uiavatarscale; } }

			public string AvatarPos { get { return avatarpos; } }

			public bool Huge { get { return huge; } }

			public string EnterGame { get { return entergame; } }

			public int AngluarSpeed { get { return angluarspeed; } }

			public string Idle { get { return idle; } }

			public string AttackIdle { get { return attackidle; } }

			public string FishingIdle { get { return fishingidle; } }

			public string Walk { get { return walk; } }

			public string AttackWalk { get { return attackwalk; } }

			public string Run { get { return run; } }

			public string AttackRun { get { return attackrun; } }

			public string RunLeft { get { return runleft; } }

			public string AttackRunLeft { get { return attackrunleft; } }

			public string RunRight { get { return runright; } }

			public string AttackRunRight { get { return attackrunright; } }

			public string MoveFx { get { return movefx; } }

			public string Freeze { get { return freeze; } }

			public string FreezeFx { get { return freezefx; } }

			string[] Hit_f { 
				get { 
					if (hit_f.Length == 16) {
					List<string> list = new List<string>();
					for (int i = hit_f.Length - 1; i >= 0; i--)
					{
						if (hit_f[i] != "-1") list.Add(hit_f[i]);
					}
					hit_f = list.ToArray();
					}
					 return hit_f;
				}
			}

			string[] Hit_l { 
				get { 
					if (hit_l.Length == 16) {
					List<string> list = new List<string>();
					for (int i = hit_l.Length - 1; i >= 0; i--)
					{
						if (hit_l[i] != "-1") list.Add(hit_l[i]);
					}
					hit_l = list.ToArray();
					}
					 return hit_l;
				}
			}

			string[] Hit_r { 
				get { 
					if (hit_r.Length == 16) {
					List<string> list = new List<string>();
					for (int i = hit_r.Length - 1; i >= 0; i--)
					{
						if (hit_r[i] != "-1") list.Add(hit_r[i]);
					}
					hit_r = list.ToArray();
					}
					 return hit_r;
				}
			}

			float[] Hitbackoffsettimescale { 
				get { 
					if (hitbackoffsettimescale.Length == 16) {
					List<float> list = new List<float>();
					for (int i = hitbackoffsettimescale.Length - 1; i >= 0; i--)
					{
						if (hitbackoffsettimescale[i] != -1) list.Add(hitbackoffsettimescale[i]);
					}
					hitbackoffsettimescale = list.ToArray();
					}
					 return hitbackoffsettimescale;
				}
			}

			string[] Hitfly { 
				get { 
					if (hitfly.Length == 16) {
					List<string> list = new List<string>();
					for (int i = hitfly.Length - 1; i >= 0; i--)
					{
						if (hitfly[i] != "-1") list.Add(hitfly[i]);
					}
					hitfly = list.ToArray();
					}
					 return hitfly;
				}
			}

			float[] Hitflyoffsettimescale { 
				get { 
					if (hitflyoffsettimescale.Length == 16) {
					List<float> list = new List<float>();
					for (int i = hitflyoffsettimescale.Length - 1; i >= 0; i--)
					{
						if (hitflyoffsettimescale[i] != -1) list.Add(hitflyoffsettimescale[i]);
					}
					hitflyoffsettimescale = list.ToArray();
					}
					 return hitflyoffsettimescale;
				}
			}

			string[] Hit_roll { 
				get { 
					if (hit_roll.Length == 16) {
					List<string> list = new List<string>();
					for (int i = hit_roll.Length - 1; i >= 0; i--)
					{
						if (hit_roll[i] != "-1") list.Add(hit_roll[i]);
					}
					hit_roll = list.ToArray();
					}
					 return hit_roll;
				}
			}

			float[] Hitrolloffsettimescale { 
				get { 
					if (hitrolloffsettimescale.Length == 16) {
					List<float> list = new List<float>();
					for (int i = hitrolloffsettimescale.Length - 1; i >= 0; i--)
					{
						if (hitrolloffsettimescale[i] != -1) list.Add(hitrolloffsettimescale[i]);
					}
					hitrolloffsettimescale = list.ToArray();
					}
					 return hitrolloffsettimescale;
				}
			}

			float[] Hitback_recover { 
				get { 
					if (hitback_recover.Length == 16) {
					List<float> list = new List<float>();
					for (int i = hitback_recover.Length - 1; i >= 0; i--)
					{
						if (hitback_recover[i] != -1) list.Add(hitback_recover[i]);
					}
					hitback_recover = list.ToArray();
					}
					 return hitback_recover;
				}
			}

			float[] Hitfly_bounce_getup { 
				get { 
					if (hitfly_bounce_getup.Length == 16) {
					List<float> list = new List<float>();
					for (int i = hitfly_bounce_getup.Length - 1; i >= 0; i--)
					{
						if (hitfly_bounce_getup[i] != -1) list.Add(hitfly_bounce_getup[i]);
					}
					hitfly_bounce_getup = list.ToArray();
					}
					 return hitfly_bounce_getup;
				}
			}

			public float HitRoll_Recover { get { return hitroll_recover; } }

			public string HitFx { get { return hitfx; } }

			public string Death { get { return death; } }

			public string DeathFx { get { return deathfx; } }

			string[] Hitcurves { 
				get { 
					if (hitcurves.Length == 16) {
					List<string> list = new List<string>();
					for (int i = hitcurves.Length - 1; i >= 0; i--)
					{
						if (hitcurves[i] != "-1") list.Add(hitcurves[i]);
					}
					hitcurves = list.ToArray();
					}
					 return hitcurves;
				}
			}

			public string DeathCurve { get { return deathcurve; } }

			public string A { get { return a; } }

			public string AA { get { return aa; } }

			public string AAA { get { return aaa; } }

			public string AAAA { get { return aaaa; } }

			public string AAAAA { get { return aaaaa; } }

			public string OtherSkills { get { return otherskills; } }

			public string SkillNum { get { return skillnum; } }

			public string Dash { get { return dash; } }

			public string Ultra { get { return ultra; } }

			public string Appear { get { return appear; } }

			public string Disappear { get { return disappear; } }

			public string FishingCast { get { return fishingcast; } }

			public string FishingPull { get { return fishingpull; } }

			public string FishingWait { get { return fishingwait; } }

			public string FishingWin { get { return fishingwin; } }

			public string FishingLose { get { return fishinglose; } }

			public string Dance { get { return dance; } }

			public string Kiss { get { return kiss; } }

			public string InheritActionOne { get { return inheritactionone; } }

			public string InheritActionTwo { get { return inheritactiontwo; } }

			public string Atlas { get { return atlas; } }

			public string Avatar { get { return avatar; } }

			public string Atlas2 { get { return atlas2; } }

			public string Avatar2 { get { return avatar2; } }

			public bool Shadow { get { return shadow; } }

			public string Feeble { get { return feeble; } }

			public string FeebleFx { get { return feeblefx; } }

			public string ArmorBroken { get { return armorbroken; } }

			public string SuperArmorRecoverySkill { get { return superarmorrecoveryskill; } }

			public string RecoveryFX { get { return recoveryfx; } }

			public string RecoveryHitSlowFX { get { return recoveryhitslowfx; } }

			public string RecoveryHitStopFX { get { return recoveryhitstopfx; } }
		}


		[DllImport("XTable")]
		static extern void iGetXEntityPresentationRow(int val, ref RowData row);

		[DllImport("XTable")]
		static extern int iGetXEntityPresentationLength();
        
        private static RowData m_data;
        
        public static int length {
            get {
				return iGetXEntityPresentationLength();
            }
        }
        
        public static RowData GetRow(int val) {
			iGetXEntityPresentationRow(val, ref m_data);
			return m_data;
        }
    }
}
