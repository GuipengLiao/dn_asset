//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8784
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace XTable {
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    
    
    public class CXEntityStatistics {
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public struct RowData {
			int uid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string name;
			uint presentid;
			int type;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string tag;
			int fightgroup;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string summongroup;
			float walkspeed;
			float runspeed;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] floatheight;
			float rotatespeed;
			int attackspeed;
			int skillcd;
			float attackprob;
			float sight;
			float fighttogetherdis;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string belocked;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string inbornbuff;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string maxsuperarmor;
			bool weakstatus;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string superarmorbrokenbuff;
			int superarmorrecoveryvalue;
			int superarmorrecoverymax;
			int attackbase;
			int magicattackbase;
			float maxhp;
			int mobaexp;
			int mobaexprange;
			bool mobakillneedhint;
			int posindex;
			int hpsection;
			bool iswander;
			bool block;
			bool dynamicblock;
			bool usinggeneralcutscene;
			bool soloshow;
			bool endshow;
			int fov;
			float aistarttime;
			float aiactiongap;
			bool isfixedincd;
			int fashiontemplate;
			bool highlight;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string usemymesh;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string extrareward;
			int aihit;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string aibehavior;
			int initenmity;
			bool alwayshpbar;
			bool hidename;
			float ratioleft;
			float ratioright;
			float ratioidle;
			float ratiodistance;
			float ratioskill;
			float ratioexp;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string navigation;
			int isnavpingpong;
			bool hideinminimap;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string access;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string samebillboard;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string pandoradropids;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string dropids;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string bigmeleepoints;

			public int Uid { get { return uid; } }

			public string Name { get { return name; } }

			public uint Presentid { get { return presentid; } }

			public int Type { get { return type; } }

			public string Tag { get { return tag; } }

			public int Fightgroup { get { return fightgroup; } }

			public string Summongroup { get { return summongroup; } }

			public float Walkspeed { get { return walkspeed; } }

			public float Runspeed { get { return runspeed; } }

			float[] Floatheight { 
				get { 
					if (floatheight.Length == 16) {
					List<int> list = new List<int>();
					for (int i = floatheight.Length - 1; i >= 0; i--)
					{
						if (floatheight[i] != -1) list.Add(floatheight[i]);
					}
					floatheight = list.ToArray();
					}
					 return floatheight;
				}
			}

			public float Rotatespeed { get { return rotatespeed; } }

			public int Attackspeed { get { return attackspeed; } }

			public int Skillcd { get { return skillcd; } }

			public float Attackprob { get { return attackprob; } }

			public float Sight { get { return sight; } }

			public float Fighttogetherdis { get { return fighttogetherdis; } }

			public string Belocked { get { return belocked; } }

			public string Inbornbuff { get { return inbornbuff; } }

			public string Maxsuperarmor { get { return maxsuperarmor; } }

			public bool Weakstatus { get { return weakstatus; } }

			public string Superarmorbrokenbuff { get { return superarmorbrokenbuff; } }

			public int Superarmorrecoveryvalue { get { return superarmorrecoveryvalue; } }

			public int Superarmorrecoverymax { get { return superarmorrecoverymax; } }

			public int Attackbase { get { return attackbase; } }

			public int Magicattackbase { get { return magicattackbase; } }

			public float Maxhp { get { return maxhp; } }

			public int Mobaexp { get { return mobaexp; } }

			public int Mobaexprange { get { return mobaexprange; } }

			public bool Mobakillneedhint { get { return mobakillneedhint; } }

			public int Posindex { get { return posindex; } }

			public int Hpsection { get { return hpsection; } }

			public bool Iswander { get { return iswander; } }

			public bool Block { get { return block; } }

			public bool Dynamicblock { get { return dynamicblock; } }

			public bool Usinggeneralcutscene { get { return usinggeneralcutscene; } }

			public bool Soloshow { get { return soloshow; } }

			public bool Endshow { get { return endshow; } }

			public int Fov { get { return fov; } }

			public float Aistarttime { get { return aistarttime; } }

			public float Aiactiongap { get { return aiactiongap; } }

			public bool Isfixedincd { get { return isfixedincd; } }

			public int Fashiontemplate { get { return fashiontemplate; } }

			public bool Highlight { get { return highlight; } }

			public string Usemymesh { get { return usemymesh; } }

			public string Extrareward { get { return extrareward; } }

			public int Aihit { get { return aihit; } }

			public string Aibehavior { get { return aibehavior; } }

			public int Initenmity { get { return initenmity; } }

			public bool Alwayshpbar { get { return alwayshpbar; } }

			public bool Hidename { get { return hidename; } }

			public float Ratioleft { get { return ratioleft; } }

			public float Ratioright { get { return ratioright; } }

			public float Ratioidle { get { return ratioidle; } }

			public float Ratiodistance { get { return ratiodistance; } }

			public float Ratioskill { get { return ratioskill; } }

			public float Ratioexp { get { return ratioexp; } }

			public string Navigation { get { return navigation; } }

			public int Isnavpingpong { get { return isnavpingpong; } }

			public bool Hideinminimap { get { return hideinminimap; } }

			public string Access { get { return access; } }

			public string Samebillboard { get { return samebillboard; } }

			public string Pandoradropids { get { return pandoradropids; } }

			public string Dropids { get { return dropids; } }

			public string Bigmeleepoints { get { return bigmeleepoints; } }
		}


		[DllImport("XTable")]
		static extern void iGetXEntityStatisticsRow(int val, ref RowData row);

		[DllImport("XTable")]
		static extern int iGetXEntityStatisticsLength();
        
        private static RowData m_data;
        
        public static int length {
            get {
                return this.iGetXEntityStatisticsLength();
            }
        }
        
        public static RowData GetRow(int val) {
			iGetXEntityStatisticsRow(val, ref m_data);
			return m_data;
        }
    }
}
