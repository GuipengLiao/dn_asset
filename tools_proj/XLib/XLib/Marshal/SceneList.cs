//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.8784
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace XTable {
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    
    
    public class CSceneList {
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
		public struct RowData {
			int sceneid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string comment;
			int scenetype;
			int isstaticscene;
			int pretask;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] prescene;
			int requiredlevel;
			int syncmode;
			bool switchtoself;
			bool canreconnect;
			int endtimeout;
			bool iscanquit;
			float delaytransfer;
			int linerolecount;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string buff;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string scenefile;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string unityscenefile;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string scenepath;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string bgm;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string blockfilepath;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] operationsettings;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string startpos;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] startface;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			float[] startrot;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string chapter;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] uipos;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string boxuipos;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string uiicon;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string fatiguecost;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] viewabledroplist;
			int exp;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop1;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop2;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop3;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop4;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] drop5;
			int money;
			int firstdownexp;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] firstdowndrop;
			int firstdownmoney;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string firstsss;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string expsealreward;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string scenechest;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string diamonddropid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string golddropid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string silverdropid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string copperdropid;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string sbox;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string ssbox;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string sssbox;
			bool isboss;
			int recommendpower;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string bossavatar;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string bossicon;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string endcutscene;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string endcutscenetime;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string wincondition;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string losecondition;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string windelaytime;
			int daylimit;
			int cooldown;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string daylimitgroupid;
			bool candrawbox;
			bool hasflyout;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string dynamicscene;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string envset;
			bool canrevive;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivenumb;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivecost;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivemoneycost;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivetime;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivebuff;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string revivebufftip;
			bool canpause;
			bool showup;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string loadingtips;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string loadingpic;
			bool scenecannavi;
			bool showautofight;
			bool showbattlestatistics;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string randomtasktype;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string randomtaskspecify;
			int usesupplement;
			int hurtcoef;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string minimap;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] minimapsize;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string minimapoutsize;
			int minimaprotation;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string staticminimapcenter;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string sceneai;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string pptcoff;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string guildexpbounus;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string failtext;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string leavescenetip;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string recommendhint;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string teaminfodefaulttab;
			int combattype;
			int sweepneedppt;
			[MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
			int[] timecounter;
			bool hascombobuff;
			bool displaypet;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string autoreturn;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string storydriver;
			int minpasstime;
			bool showskill;
			bool shownormalattack;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string winconditiontips;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string battleexplaintips;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string dps;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string canviprevive;
			bool hideteamindicate;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string shieldsight;
			int specifiedtargetlocatedrange;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string spactivityactivedrop;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string spactivitydrop;
			[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
			string viprevivelimit;

			public int Sceneid { get { return sceneid; } }

			public string Comment { get { return comment; } }

			public int Scenetype { get { return scenetype; } }

			public int Isstaticscene { get { return isstaticscene; } }

			public int Pretask { get { return pretask; } }

			int[] Prescene { 
				get { 
					if (prescene.Length == 16) {
					List<int> list = new List<int>();
					for (int i = prescene.Length - 1; i >= 0; i--)
					{
						if (prescene[i] != -1) list.Add(prescene[i]);
					}
					prescene = list.ToArray();
					}
					 return prescene;
				}
			}

			public int Requiredlevel { get { return requiredlevel; } }

			public int Syncmode { get { return syncmode; } }

			public bool Switchtoself { get { return switchtoself; } }

			public bool Canreconnect { get { return canreconnect; } }

			public int Endtimeout { get { return endtimeout; } }

			public bool Iscanquit { get { return iscanquit; } }

			public float Delaytransfer { get { return delaytransfer; } }

			public int Linerolecount { get { return linerolecount; } }

			public string Buff { get { return buff; } }

			public string Scenefile { get { return scenefile; } }

			public string Unityscenefile { get { return unityscenefile; } }

			public string Scenepath { get { return scenepath; } }

			public string Bgm { get { return bgm; } }

			public string Blockfilepath { get { return blockfilepath; } }

			int[] Operationsettings { 
				get { 
					if (operationsettings.Length == 16) {
					List<int> list = new List<int>();
					for (int i = operationsettings.Length - 1; i >= 0; i--)
					{
						if (operationsettings[i] != -1) list.Add(operationsettings[i]);
					}
					operationsettings = list.ToArray();
					}
					 return operationsettings;
				}
			}

			public string Startpos { get { return startpos; } }

			int[] Startface { 
				get { 
					if (startface.Length == 16) {
					List<int> list = new List<int>();
					for (int i = startface.Length - 1; i >= 0; i--)
					{
						if (startface[i] != -1) list.Add(startface[i]);
					}
					startface = list.ToArray();
					}
					 return startface;
				}
			}

			float[] Startrot { 
				get { 
					if (startrot.Length == 16) {
					List<int> list = new List<int>();
					for (int i = startrot.Length - 1; i >= 0; i--)
					{
						if (startrot[i] != -1) list.Add(startrot[i]);
					}
					startrot = list.ToArray();
					}
					 return startrot;
				}
			}

			public string Chapter { get { return chapter; } }

			int[] Uipos { 
				get { 
					if (uipos.Length == 16) {
					List<int> list = new List<int>();
					for (int i = uipos.Length - 1; i >= 0; i--)
					{
						if (uipos[i] != -1) list.Add(uipos[i]);
					}
					uipos = list.ToArray();
					}
					 return uipos;
				}
			}

			public string Boxuipos { get { return boxuipos; } }

			public string Uiicon { get { return uiicon; } }

			public string Fatiguecost { get { return fatiguecost; } }

			int[] Viewabledroplist { 
				get { 
					if (viewabledroplist.Length == 16) {
					List<int> list = new List<int>();
					for (int i = viewabledroplist.Length - 1; i >= 0; i--)
					{
						if (viewabledroplist[i] != -1) list.Add(viewabledroplist[i]);
					}
					viewabledroplist = list.ToArray();
					}
					 return viewabledroplist;
				}
			}

			public int Exp { get { return exp; } }

			int[] Drop { 
				get { 
					if (drop.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop.Length - 1; i >= 0; i--)
					{
						if (drop[i] != -1) list.Add(drop[i]);
					}
					drop = list.ToArray();
					}
					 return drop;
				}
			}

			int[] Drop1 { 
				get { 
					if (drop1.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop1.Length - 1; i >= 0; i--)
					{
						if (drop1[i] != -1) list.Add(drop1[i]);
					}
					drop1 = list.ToArray();
					}
					 return drop1;
				}
			}

			int[] Drop2 { 
				get { 
					if (drop2.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop2.Length - 1; i >= 0; i--)
					{
						if (drop2[i] != -1) list.Add(drop2[i]);
					}
					drop2 = list.ToArray();
					}
					 return drop2;
				}
			}

			int[] Drop3 { 
				get { 
					if (drop3.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop3.Length - 1; i >= 0; i--)
					{
						if (drop3[i] != -1) list.Add(drop3[i]);
					}
					drop3 = list.ToArray();
					}
					 return drop3;
				}
			}

			int[] Drop4 { 
				get { 
					if (drop4.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop4.Length - 1; i >= 0; i--)
					{
						if (drop4[i] != -1) list.Add(drop4[i]);
					}
					drop4 = list.ToArray();
					}
					 return drop4;
				}
			}

			int[] Drop5 { 
				get { 
					if (drop5.Length == 16) {
					List<int> list = new List<int>();
					for (int i = drop5.Length - 1; i >= 0; i--)
					{
						if (drop5[i] != -1) list.Add(drop5[i]);
					}
					drop5 = list.ToArray();
					}
					 return drop5;
				}
			}

			public int Money { get { return money; } }

			public int Firstdownexp { get { return firstdownexp; } }

			int[] Firstdowndrop { 
				get { 
					if (firstdowndrop.Length == 16) {
					List<int> list = new List<int>();
					for (int i = firstdowndrop.Length - 1; i >= 0; i--)
					{
						if (firstdowndrop[i] != -1) list.Add(firstdowndrop[i]);
					}
					firstdowndrop = list.ToArray();
					}
					 return firstdowndrop;
				}
			}

			public int Firstdownmoney { get { return firstdownmoney; } }

			public string Firstsss { get { return firstsss; } }

			public string Expsealreward { get { return expsealreward; } }

			public string Scenechest { get { return scenechest; } }

			public string Diamonddropid { get { return diamonddropid; } }

			public string Golddropid { get { return golddropid; } }

			public string Silverdropid { get { return silverdropid; } }

			public string Copperdropid { get { return copperdropid; } }

			public string Sbox { get { return sbox; } }

			public string Ssbox { get { return ssbox; } }

			public string Sssbox { get { return sssbox; } }

			public bool Isboss { get { return isboss; } }

			public int Recommendpower { get { return recommendpower; } }

			public string Bossavatar { get { return bossavatar; } }

			public string Bossicon { get { return bossicon; } }

			public string Endcutscene { get { return endcutscene; } }

			public string Endcutscenetime { get { return endcutscenetime; } }

			public string Wincondition { get { return wincondition; } }

			public string Losecondition { get { return losecondition; } }

			public string Windelaytime { get { return windelaytime; } }

			public int Daylimit { get { return daylimit; } }

			public int Cooldown { get { return cooldown; } }

			public string Daylimitgroupid { get { return daylimitgroupid; } }

			public bool Candrawbox { get { return candrawbox; } }

			public bool Hasflyout { get { return hasflyout; } }

			public string Dynamicscene { get { return dynamicscene; } }

			public string Envset { get { return envset; } }

			public bool Canrevive { get { return canrevive; } }

			public string Revivenumb { get { return revivenumb; } }

			public string Revivecost { get { return revivecost; } }

			public string Revivemoneycost { get { return revivemoneycost; } }

			public string Revivetime { get { return revivetime; } }

			public string Revivebuff { get { return revivebuff; } }

			public string Revivebufftip { get { return revivebufftip; } }

			public bool Canpause { get { return canpause; } }

			public bool Showup { get { return showup; } }

			public string Loadingtips { get { return loadingtips; } }

			public string Loadingpic { get { return loadingpic; } }

			public bool Scenecannavi { get { return scenecannavi; } }

			public bool Showautofight { get { return showautofight; } }

			public bool Showbattlestatistics { get { return showbattlestatistics; } }

			public string Randomtasktype { get { return randomtasktype; } }

			public string Randomtaskspecify { get { return randomtaskspecify; } }

			public int Usesupplement { get { return usesupplement; } }

			public int Hurtcoef { get { return hurtcoef; } }

			public string Minimap { get { return minimap; } }

			int[] Minimapsize { 
				get { 
					if (minimapsize.Length == 16) {
					List<int> list = new List<int>();
					for (int i = minimapsize.Length - 1; i >= 0; i--)
					{
						if (minimapsize[i] != -1) list.Add(minimapsize[i]);
					}
					minimapsize = list.ToArray();
					}
					 return minimapsize;
				}
			}

			public string Minimapoutsize { get { return minimapoutsize; } }

			public int Minimaprotation { get { return minimaprotation; } }

			public string Staticminimapcenter { get { return staticminimapcenter; } }

			public string Sceneai { get { return sceneai; } }

			public string Pptcoff { get { return pptcoff; } }

			public string Guildexpbounus { get { return guildexpbounus; } }

			public string Failtext { get { return failtext; } }

			public string Leavescenetip { get { return leavescenetip; } }

			public string Recommendhint { get { return recommendhint; } }

			public string Teaminfodefaulttab { get { return teaminfodefaulttab; } }

			public int Combattype { get { return combattype; } }

			public int Sweepneedppt { get { return sweepneedppt; } }

			int[] Timecounter { 
				get { 
					if (timecounter.Length == 16) {
					List<int> list = new List<int>();
					for (int i = timecounter.Length - 1; i >= 0; i--)
					{
						if (timecounter[i] != -1) list.Add(timecounter[i]);
					}
					timecounter = list.ToArray();
					}
					 return timecounter;
				}
			}

			public bool Hascombobuff { get { return hascombobuff; } }

			public bool Displaypet { get { return displaypet; } }

			public string Autoreturn { get { return autoreturn; } }

			public string Storydriver { get { return storydriver; } }

			public int Minpasstime { get { return minpasstime; } }

			public bool Showskill { get { return showskill; } }

			public bool Shownormalattack { get { return shownormalattack; } }

			public string Winconditiontips { get { return winconditiontips; } }

			public string Battleexplaintips { get { return battleexplaintips; } }

			public string Dps { get { return dps; } }

			public string Canviprevive { get { return canviprevive; } }

			public bool Hideteamindicate { get { return hideteamindicate; } }

			public string Shieldsight { get { return shieldsight; } }

			public int Specifiedtargetlocatedrange { get { return specifiedtargetlocatedrange; } }

			public string Spactivityactivedrop { get { return spactivityactivedrop; } }

			public string Spactivitydrop { get { return spactivitydrop; } }

			public string Viprevivelimit { get { return viprevivelimit; } }
		}


		[DllImport("XTable")]
		static extern void iGetSceneListRow(int val, ref RowData row);

		[DllImport("XTable")]
		static extern int iGetSceneListLength();
        
        private static RowData m_data;
        
        public static int length {
            get {
                return this.iGetSceneListLength();
            }
        }
        
        public static RowData GetRow(int val) {
			iGetSceneListRow(val, ref m_data);
			return m_data;
        }
    }
}
